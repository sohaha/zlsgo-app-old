package model

import (
	"time"
)

type Test struct {
	Id int `json:"id" xorm:"autoincr not null pk INTEGER comment('主键')"`

	Text string `json:"text" xorm:"varchar(255) default('The is string') comment('文本')"`
	Hide string `json:"-" xorm:"varchar(255) default('The is hide') comment('隐藏')"`
	Code int    `json:"code" xorm:"int(1) default(9) comment('编号')"`

	// 数据创建与更新时间
	CreatedAt jsonTime `json:"created_at,omitempty" xorm:"created comment('创建时间')"`
	UpdatedAt jsonTime `json:"updated_at,omitempty" xorm:"updated comment('更新时间')"`

	// 如果使用了软删除，用真实删除需要使用 .Unscoped()
	DeletedAt time.Time `json:"-" xorm:"deleted -> comment('删除时间')"`
	// 如果使用乐观锁更新时候必传
	// Version int `json:"version,omitempty" xorm:"version comment('乐观锁')"`
}

// 表迁移
func (m *migrate) MigrateTest() {
	m.tables = append(m.tables, &Test{})
}

// 验证规则
var ruleTest = make(map[string]zvalid.Engine)

func init() {
	// ruleTest["text"] = zvalid.New().SetAlias("文本").Required().HasLetter()
}


func (t Test) ValidRule(fields ...string) map[string]zvalid.Engine {
	return getValidRule(&ruleTest, fields...)
}
