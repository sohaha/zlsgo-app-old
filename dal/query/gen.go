// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
)

func Use(db *gorm.DB) *Query {
	return &Query{
		db:               db,
		ManageLog:        newManageLog(db),
		ManagePermission: newManagePermission(db),
		ManageRole:       newManageRole(db),
		ManageRule:       newManageRule(db),
		ManageUser:       newManageUser(db),
		MigrationsLog:    newMigrationsLog(db),
	}
}

type Query struct {
	db *gorm.DB

	ManageLog        manageLog
	ManagePermission managePermission
	ManageRole       manageRole
	ManageRule       manageRule
	ManageUser       manageUser
	MigrationsLog    migrationsLog
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:               db,
		ManageLog:        q.ManageLog.clone(db),
		ManagePermission: q.ManagePermission.clone(db),
		ManageRole:       q.ManageRole.clone(db),
		ManageRule:       q.ManageRule.clone(db),
		ManageUser:       q.ManageUser.clone(db),
		MigrationsLog:    q.MigrationsLog.clone(db),
	}
}

type queryCtx struct {
	ManageLog        manageLogDo
	ManagePermission managePermissionDo
	ManageRole       manageRoleDo
	ManageRule       manageRuleDo
	ManageUser       manageUserDo
	MigrationsLog    migrationsLogDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		ManageLog:        *q.ManageLog.WithContext(ctx),
		ManagePermission: *q.ManagePermission.WithContext(ctx),
		ManageRole:       *q.ManageRole.WithContext(ctx),
		ManageRule:       *q.ManageRule.WithContext(ctx),
		ManageUser:       *q.ManageUser.WithContext(ctx),
		MigrationsLog:    *q.MigrationsLog.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	return &QueryTx{q.clone(q.db.Begin(opts...))}
}

type QueryTx struct{ *Query }

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
