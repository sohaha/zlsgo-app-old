// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"app/dal/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newManageRole(db *gorm.DB) manageRole {
	_manageRole := manageRole{}

	_manageRole.manageRoleDo.UseDB(db)
	_manageRole.manageRoleDo.UseModel(&model.ManageRole{})

	tableName := _manageRole.manageRoleDo.TableName()
	_manageRole.ALL = field.NewField(tableName, "*")
	_manageRole.ID = field.NewInt32(tableName, "id")
	_manageRole.Name = field.NewString(tableName, "name")
	_manageRole.Alias = field.NewString(tableName, "alias")
	_manageRole.Remark = field.NewString(tableName, "remark")
	_manageRole.Creator = field.NewInt32(tableName, "creator")
	_manageRole.Status = field.NewInt32(tableName, "status")
	_manageRole.CreatedAt = field.NewTime(tableName, "created_at")
	_manageRole.UpdatedAt = field.NewTime(tableName, "updated_at")

	_manageRole.fillFieldMap()

	return _manageRole
}

type manageRole struct {
	manageRoleDo

	ALL       field.Field
	ID        field.Int32
	Name      field.String
	Alias     field.String
	Remark    field.String
	Creator   field.Int32
	Status    field.Int32
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (m manageRole) As(alias string) *manageRole {
	m.manageRoleDo.DO = *(m.manageRoleDo.As(alias).(*gen.DO))

	m.ALL = field.NewField(alias, "*")
	m.ID = field.NewInt32(alias, "id")
	m.Name = field.NewString(alias, "name")
	m.Alias = field.NewString(alias, "alias")
	m.Remark = field.NewString(alias, "remark")
	m.Creator = field.NewInt32(alias, "creator")
	m.Status = field.NewInt32(alias, "status")
	m.CreatedAt = field.NewTime(alias, "created_at")
	m.UpdatedAt = field.NewTime(alias, "updated_at")

	m.fillFieldMap()

	return &m
}

func (m *manageRole) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *manageRole) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 8)
	m.fieldMap["id"] = m.ID
	m.fieldMap["name"] = m.Name
	m.fieldMap["alias"] = m.Alias
	m.fieldMap["remark"] = m.Remark
	m.fieldMap["creator"] = m.Creator
	m.fieldMap["status"] = m.Status
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["updated_at"] = m.UpdatedAt
}

func (m manageRole) clone(db *gorm.DB) manageRole {
	m.manageRoleDo.ReplaceDB(db)
	return m
}

type manageRoleDo struct{ gen.DO }

func (m manageRoleDo) Debug() *manageRoleDo {
	return m.withDO(m.DO.Debug())
}

func (m manageRoleDo) WithContext(ctx context.Context) *manageRoleDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m manageRoleDo) Clauses(conds ...clause.Expression) *manageRoleDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m manageRoleDo) Not(conds ...gen.Condition) *manageRoleDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m manageRoleDo) Or(conds ...gen.Condition) *manageRoleDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m manageRoleDo) Select(conds ...field.Expr) *manageRoleDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m manageRoleDo) Where(conds ...gen.Condition) *manageRoleDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m manageRoleDo) Order(conds ...field.Expr) *manageRoleDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m manageRoleDo) Distinct(cols ...field.Expr) *manageRoleDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m manageRoleDo) Omit(cols ...field.Expr) *manageRoleDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m manageRoleDo) Join(table schema.Tabler, on ...field.Expr) *manageRoleDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m manageRoleDo) LeftJoin(table schema.Tabler, on ...field.Expr) *manageRoleDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m manageRoleDo) RightJoin(table schema.Tabler, on ...field.Expr) *manageRoleDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m manageRoleDo) Group(cols ...field.Expr) *manageRoleDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m manageRoleDo) Having(conds ...gen.Condition) *manageRoleDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m manageRoleDo) Limit(limit int) *manageRoleDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m manageRoleDo) Offset(offset int) *manageRoleDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m manageRoleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *manageRoleDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m manageRoleDo) Unscoped() *manageRoleDo {
	return m.withDO(m.DO.Unscoped())
}

func (m manageRoleDo) Create(values ...*model.ManageRole) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m manageRoleDo) CreateInBatches(values []*model.ManageRole, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m manageRoleDo) Save(values ...*model.ManageRole) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m manageRoleDo) First() (*model.ManageRole, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ManageRole), nil
	}
}

func (m manageRoleDo) Take() (*model.ManageRole, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ManageRole), nil
	}
}

func (m manageRoleDo) Last() (*model.ManageRole, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ManageRole), nil
	}
}

func (m manageRoleDo) Find() ([]*model.ManageRole, error) {
	result, err := m.DO.Find()
	return result.([]*model.ManageRole), err
}

func (m manageRoleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ManageRole, err error) {
	buf := make([]*model.ManageRole, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m manageRoleDo) FindInBatches(result *[]*model.ManageRole, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m manageRoleDo) Attrs(attrs ...field.AssignExpr) *manageRoleDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m manageRoleDo) Assign(attrs ...field.AssignExpr) *manageRoleDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m manageRoleDo) Joins(field field.RelationField) *manageRoleDo {
	return m.withDO(m.DO.Joins(field))
}

func (m manageRoleDo) Preload(field field.RelationField) *manageRoleDo {
	return m.withDO(m.DO.Preload(field))
}

func (m manageRoleDo) FirstOrInit() (*model.ManageRole, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ManageRole), nil
	}
}

func (m manageRoleDo) FirstOrCreate() (*model.ManageRole, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ManageRole), nil
	}
}

func (m manageRoleDo) FindByPage(offset int, limit int) (result []*model.ManageRole, count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	if limit <= 0 {
		return
	}

	result, err = m.Offset(offset).Limit(limit).Find()
	return
}

func (m manageRoleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m *manageRoleDo) withDO(do gen.Dao) *manageRoleDo {
	m.DO = *do.(*gen.DO)
	return m
}
