// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"app/dal/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newManageUser(db *gorm.DB) manageUser {
	_manageUser := manageUser{}

	_manageUser.manageUserDo.UseDB(db)
	_manageUser.manageUserDo.UseModel(&model.ManageUser{})

	tableName := _manageUser.manageUserDo.TableName()
	_manageUser.ALL = field.NewField(tableName, "*")
	_manageUser.ID = field.NewInt32(tableName, "id")
	_manageUser.Username = field.NewString(tableName, "username")
	_manageUser.Password = field.NewString(tableName, "password")
	_manageUser.Key = field.NewString(tableName, "key")
	_manageUser.Nickname = field.NewString(tableName, "nickname")
	_manageUser.Email = field.NewString(tableName, "email")
	_manageUser.Remark = field.NewString(tableName, "remark")
	_manageUser.Avatar = field.NewString(tableName, "avatar")
	_manageUser.Status = field.NewInt32(tableName, "status")
	_manageUser.IsSuper = field.NewInt32(tableName, "is_super")
	_manageUser.Effective = field.NewInt32(tableName, "effective")
	_manageUser.CreatedAt = field.NewTime(tableName, "created_at")
	_manageUser.UpdatedAt = field.NewTime(tableName, "updated_at")

	_manageUser.fillFieldMap()

	return _manageUser
}

type manageUser struct {
	manageUserDo

	ALL       field.Field
	ID        field.Int32
	Username  field.String
	Password  field.String
	Key       field.String
	Nickname  field.String
	Email     field.String
	Remark    field.String
	Avatar    field.String
	Status    field.Int32
	IsSuper   field.Int32
	Effective field.Int32
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (m manageUser) As(alias string) *manageUser {
	m.manageUserDo.DO = *(m.manageUserDo.As(alias).(*gen.DO))

	m.ALL = field.NewField(alias, "*")
	m.ID = field.NewInt32(alias, "id")
	m.Username = field.NewString(alias, "username")
	m.Password = field.NewString(alias, "password")
	m.Key = field.NewString(alias, "key")
	m.Nickname = field.NewString(alias, "nickname")
	m.Email = field.NewString(alias, "email")
	m.Remark = field.NewString(alias, "remark")
	m.Avatar = field.NewString(alias, "avatar")
	m.Status = field.NewInt32(alias, "status")
	m.IsSuper = field.NewInt32(alias, "is_super")
	m.Effective = field.NewInt32(alias, "effective")
	m.CreatedAt = field.NewTime(alias, "created_at")
	m.UpdatedAt = field.NewTime(alias, "updated_at")

	m.fillFieldMap()

	return &m
}

func (m *manageUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *manageUser) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 13)
	m.fieldMap["id"] = m.ID
	m.fieldMap["username"] = m.Username
	m.fieldMap["password"] = m.Password
	m.fieldMap["key"] = m.Key
	m.fieldMap["nickname"] = m.Nickname
	m.fieldMap["email"] = m.Email
	m.fieldMap["remark"] = m.Remark
	m.fieldMap["avatar"] = m.Avatar
	m.fieldMap["status"] = m.Status
	m.fieldMap["is_super"] = m.IsSuper
	m.fieldMap["effective"] = m.Effective
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["updated_at"] = m.UpdatedAt
}

func (m manageUser) clone(db *gorm.DB) manageUser {
	m.manageUserDo.ReplaceDB(db)
	return m
}

type manageUserDo struct{ gen.DO }

func (m manageUserDo) Debug() *manageUserDo {
	return m.withDO(m.DO.Debug())
}

func (m manageUserDo) WithContext(ctx context.Context) *manageUserDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m manageUserDo) Clauses(conds ...clause.Expression) *manageUserDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m manageUserDo) Not(conds ...gen.Condition) *manageUserDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m manageUserDo) Or(conds ...gen.Condition) *manageUserDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m manageUserDo) Select(conds ...field.Expr) *manageUserDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m manageUserDo) Where(conds ...gen.Condition) *manageUserDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m manageUserDo) Order(conds ...field.Expr) *manageUserDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m manageUserDo) Distinct(cols ...field.Expr) *manageUserDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m manageUserDo) Omit(cols ...field.Expr) *manageUserDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m manageUserDo) Join(table schema.Tabler, on ...field.Expr) *manageUserDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m manageUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) *manageUserDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m manageUserDo) RightJoin(table schema.Tabler, on ...field.Expr) *manageUserDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m manageUserDo) Group(cols ...field.Expr) *manageUserDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m manageUserDo) Having(conds ...gen.Condition) *manageUserDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m manageUserDo) Limit(limit int) *manageUserDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m manageUserDo) Offset(offset int) *manageUserDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m manageUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *manageUserDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m manageUserDo) Unscoped() *manageUserDo {
	return m.withDO(m.DO.Unscoped())
}

func (m manageUserDo) Create(values ...*model.ManageUser) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m manageUserDo) CreateInBatches(values []*model.ManageUser, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m manageUserDo) Save(values ...*model.ManageUser) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m manageUserDo) First() (*model.ManageUser, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ManageUser), nil
	}
}

func (m manageUserDo) Take() (*model.ManageUser, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ManageUser), nil
	}
}

func (m manageUserDo) Last() (*model.ManageUser, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ManageUser), nil
	}
}

func (m manageUserDo) Find() ([]*model.ManageUser, error) {
	result, err := m.DO.Find()
	return result.([]*model.ManageUser), err
}

func (m manageUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ManageUser, err error) {
	buf := make([]*model.ManageUser, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m manageUserDo) FindInBatches(result *[]*model.ManageUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m manageUserDo) Attrs(attrs ...field.AssignExpr) *manageUserDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m manageUserDo) Assign(attrs ...field.AssignExpr) *manageUserDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m manageUserDo) Joins(field field.RelationField) *manageUserDo {
	return m.withDO(m.DO.Joins(field))
}

func (m manageUserDo) Preload(field field.RelationField) *manageUserDo {
	return m.withDO(m.DO.Preload(field))
}

func (m manageUserDo) FirstOrInit() (*model.ManageUser, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ManageUser), nil
	}
}

func (m manageUserDo) FirstOrCreate() (*model.ManageUser, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ManageUser), nil
	}
}

func (m manageUserDo) FindByPage(offset int, limit int) (result []*model.ManageUser, count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	if limit <= 0 {
		return
	}

	result, err = m.Offset(offset).Limit(limit).Find()
	return
}

func (m manageUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m *manageUserDo) withDO(do gen.Dao) *manageUserDo {
	m.DO = *do.(*gen.DO)
	return m
}
